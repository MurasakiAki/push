declare -A variables
declare -A var_types
declare -A dec_fun

true=1
false=0

datatype() {
    local name="$1"
    
    if [ ${var_types["$name"]+_} ]; then
        echo "${var_types["$name"]}"
    else
        echo "Error: Undefined variable name: $name."
        exit 1
    fi
}

string() {
    local name="$1"
    local value=$3
    
    if [ "$2" == "=" ]; then
        variables["$name"]=$value
        var_types["$name"]="string"
        
        eval "$name() {
            if [ \"\$1\" == '=' ] && [ -n \"\$2\" ]; then
                variables[\"$name\"]=\"\$2\"
            elif [ -z \"\$1\" ]; then
                echo \${variables[\"$name\"]}
            else
                echo \"SyntaxError: '$name' is missing a '='\"
                exit 1
            fi
        }"
        
        eval "$name.abc() {
            echo \$(echo \"\${variables[\"$name\"]}\" | grep -o . | sort | tr -d '\\n')
        }"

        dec_fun+="$name"
        dec_fun+="$name.abc"
    else
        echo "SyntaxError: '$name' is missing a '='"
        exit 1
    fi
}

int() {
    local name="$1"
    local value=$3
    
    if [ "$2" == "=" ]; then
        if [[ "$value" =~ ^-?[0-9]+$ ]]; then
            variables["$name"]=$value
            var_types["$name"]="int"
            
            eval "$name() {
                if [ \"\$1\" == '=' ] && [[ \"\$2\" =~ ^-?[0-9]+$ ]]; then
                    variables[\"$name\"]=\$2
                elif [ -z \"\$1\" ]; then
                    echo \${variables[\"$name\"]}
                else
                    echo \"SyntaxError: '$name' is missing a '='\"
                    exit 1
                fi
            }"
            
            eval "$name.bin() {
                echo \"obase=2; \${variables[\"$name\"]}\" | bc
            }"
            
            eval "$name.hex() {
                echo \"obase=16; \${variables[\"$name\"]}\" | bc
            }"
            
            eval "$name.is_eq_to() {
                local to_com=\$1

                if [ \"\${variables[\"$name\"]}\" == \"\$to_com\" ]; then
                    echo 1
                else
                    echo 0
                fi
            }"

            dec_fun+="$name"
            dec_fun+="$name.bin"
            dec_fun+="$name.hex"
            dec_fun+="$name.is_eq_to"

        else
            echo "TypeError: int '$name' cannot be assigned value of '$value'"
            exit 1
        fi
    else
        echo "SyntaxError: '$name' is missing a '='"
        exit 1
    fi
}

bool() {
    local name="$1"
    local value=$3

    if [ "$2" == "=" ]; then
        if [ "$value" == "1" ] || [ "$value" == "0" ]; then
            variables["$name"]=$value
            var_types["$name"]="bool"

            eval "$name() {
                if [ \"\$1\" == '=' ]; then
                    if [ \"\$2\" == \"1\" ] || [ \"\$2\" == \"0\" ]; then
                        variables[\"$name\"]=\$2
                    else
                        echo \"TypeError: bool '$name' cannot be assigned value of '\$2'\"
                        exit 1
                    fi
                elif [ -z \"\$1\" ]; then
                    echo \${variables[\"$name\"]}
                else
                    echo \"SyntaxError: '$name' is missing a '='\"
                    exit 1
                fi
            }"
            
            dec_fun+="$name"

        else
            echo "TypeError: bool '$name' cannot be assigned value of '$value'"
            exit 1
        fi
    else
        echo "SyntaxError: '$name' is missing a '='"
        exit 1
    fi
}

dismiss() {
    if [ $# -eq 0 ]; then
        for func in "${dec_fun[@]}"; do
            unset -f "$func"
        done

        unset variables
        unset var_types

    else
        if [[ -v variables["$1"] ]]; then
            local name="$1"
            case "${var_types["$name"]}" in
                int)
                    unset -f "$name.bin"
                    unset -f "$name.hex"
                    unset -f "$name.is_eq_to"
                    ;;
                string)
                    unset -f "$name.abc"
                    ;;
                *)
                    echo "Invalid data type in dismissing function '$name'"
                    exit 1
                    ;;
            esac

            unset -f "$name"
            unset variables["$name"]
            unset var_types["$name"]
        else
            echo "MemoryError: Variable '$1' does not exist or has already been dismissed"
            exit 1
        fi
    fi
}

class() {
    
}